{"version":3,"sources":["components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["regex","Contacts","_ref","contacts","react_default","a","createElement","map","contact","class","src","concat","post_image","alt","post_tag","href","post_title","post_content","replace","slice","length","App","state","components_contacts","this","_this2","fetch","then","res","json","data","setState","catch","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAIQA,EAAQ,gBA2BDC,EA1BE,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SAEf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,qBACPH,EAASI,IAAI,SAACC,GAAD,OAGTJ,EAAAC,EAAAC,cAAA,OAAKG,MAAM,WAC1BL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,qBAETL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,qBAAsBC,IAAG,0DAAAC,OAA4DH,EAAQI,YAAcC,IAAI,iCAG5HT,EAAAC,EAAAC,cAAA,OAAKG,MAAM,yBACTL,EAAAC,EAAAC,cAAA,OAAKG,MAAM,6DAA6DD,EAAQM,UAChFV,EAAAC,EAAAC,cAAA,KAAGS,KAAK,wBAAwBN,MAAM,gFAAgFD,EAAQQ,YAC9HZ,EAAAC,EAAAC,cAAA,KAAGG,MAAM,sBAAsBD,EAAQS,aAAaC,QAAQlB,EAAO,IAAImB,MAAM,EAAE,MAAQX,EAAQS,aAAaC,QAAQlB,EAAO,IAAIoB,OAAS,IAAM,MAAQ,WCE3IC,6MAdXC,MAAQ,CACJnB,SAAU,4EANV,OACIC,EAAAC,EAAAC,cAACiB,EAAD,CAAUpB,SAAUqB,KAAKF,MAAMnB,uDAQnB,IAAAsB,EAAAD,KAChBE,MAAM,8DACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GACHL,EAAKM,SAAS,CAAE5B,SAAU2B,MAE7BE,MAAMC,QAAQC,YAjBTC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.00257638.chunk.js","sourcesContent":["import React from 'react'\n\n\n\n  const regex = /(<([^>]+)>)/ig;\nconst Contacts = ({contacts}) => {\n\n    return (\n        <div>\n            <center><h1>My API</h1></center>\n            {contacts.map((contact) => (\n              \n                 \n                 <div class=\"md:flex\">\n  <div class=\"md:flex-shrink-0 \" >\n \n    <img class=\"rounded-lg md:w-56\"  src={`https://avishkamovie2019.000webhostapp.com/blog2/Admin/${contact.post_image}`} alt=\"Woman paying for a purchase\"/>\n\n  </div>\n  <div class=\"mt-10 md:mt-0 md:ml-6\">\n    <div class=\"uppercase tracking-wide text-sm text-indigo-600 font-bold\">{contact.post_tag}</div>\n    <a href=\"https://aviblogger.tk\" class=\"block mt-1 text-lg leading-tight font-semibold text-gray-900 hover:underline\">{contact.post_title}</a>\n    <p class=\"mt-2 text-gray-600\">{contact.post_content.replace(regex, '').slice(0,250) + (contact.post_content.replace(regex, '').length > 250 ? \"...\" : \"\")}</p>\n  </div>\n</div>\n                \n            ))}\n        </div>\n    )\n};\n\nexport default Contacts","import React, {Component} from 'react';\nimport Contacts from './components/contacts';\n\nclass App extends Component {\n    render() {\n        return (\n            <Contacts contacts={this.state.contacts} />\n        )\n    }\n\n    state = {\n        contacts: []\n    };\n\n    componentDidMount() {\n        fetch('https://avishkamovie2019.000webhostapp.com/blog3/myapi.php')\n            .then(res => res.json())\n            .then((data) => {\n                this.setState({ contacts: data })\n            })\n            .catch(console.log)\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}